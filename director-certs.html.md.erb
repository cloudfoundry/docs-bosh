---
title: Director SSL Certificate Configuration
---

## <a id="generate"></a> Generate SSL certificates

Depending on you configuration, there are up to three endpoints to be secured using SSL certificates: The Director, the UAA, and the SAML Service Provider on the UAA.

<p class="note">Note: If you are using the UAA for user management, an SSL certificate is mandatory for the Director and the UAA.</p>

You can use the following script `director_certs.sh` to generate a root CA certificate and use it to sign three generated SSL certificates:

<pre class="bash">
#!/bin/bash

set -e

ip=$1
if [[ "${ip}X" == "X" ]]; then
  echo "USAGE: ./director_certs.sh [public IP | path to bosh-init manifest]"
  exit 1
fi
if [[ -f ${ip} ]]; then
  ip=$(cat ${ip} | yaml2json | jq -r ".jobs[] | select(.templates[].name | contains(\"director\")).networks[0].static_ips[0]")
fi
echo "Generating certs for ${ip}"

mkdir -p tmp
certs=`dirname $0`/certs/${ip}

rm -rf $certs &amp;&amp; mkdir -p $certs

cd $certs

echo "Generating CA..."
openssl genrsa -out rootCA.key 2048
yes "" | openssl req -x509 -new -nodes -key rootCA.key \
  -out rootCA.pem -days 99999

function generateCert {
  name=$1
  ip=$2

  cat >openssl-exts.conf <<-EOL
extensions = san
[san]
subjectAltName = IP:${ip}
EOL

  echo "Generating private key..."
  openssl genrsa -out ${name}.key 2048

  echo "Generating certificate signing request for ${ip}..."
  # golang requires to have SAN for the IP
  openssl req -new -nodes -key ${name}.key \
    -out ${name}.csr \
    -subj "/C=US/O=BOSH/CN=${ip}"

  echo "Generating certificate ${ip}..."
  openssl x509 -req -in ${name}.csr \
    -CA rootCA.pem -CAkey rootCA.key -CAcreateserial \
    -out ${name}.crt -days 99999 \
    -extfile ./openssl-exts.conf

  echo "Deleting certificate signing request and config..."
  rm ${name}.csr
  rm ./openssl-exts.conf
}

generateCert director ${ip}
generateCert uaa-web ${ip}
generateCert uaa-sp ${ip}

echo "Generating spruce template..."
certs=`dirname $0`/certs/${ip}

function indent() {
  c='s/^/        /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}


cat > certs-${ip}.yml <<EOF
---
properties:
  director:
    ssl:
      key: |
$(cat director.key | indent)

      cert: |
$(cat director.crt | indent)

  uaa:
    sslPrivateKey: |
$(cat uaa-web.key | indent)

    sslCertificate: |
$(cat uaa-web.crt | indent)

  login:
    saml:
      serviceProviderKey: |
$(cat uaa-sp.key | indent)

      serviceProviderCertificate: |
$(cat uaa-sp.crt | indent)

  hm:
    director_account:
      ca_cert:
$(cat rootCA.pem | indent)
EOF

echo "Combine manifest template below with your BOSH manifest:"
cat certs-${ip}.yml
echo
</pre>

Either run the script with the public IP of the director; or with a manifest for BOSH as the argument:

<pre>
./director_certs.sh 10.244.4.2
./director_certs.sh bosh.yml
</pre>

---
## <a id="configure"></a>Configure the Director to use certificates

Update the Director deployment manifest (using the generated template above or with your own CA certs):

- `director.ssl.key`
    - Private key for the Director (e.g. `certs/director.key`)
- `director.ssl.cert`
    - Associated certificate for the Director (e.g. `certs/director.crt`)
    - Include all intermediate certificates if necessary
- `hm.director_account.ca_cert`
    - CA certificate used by the HM to verify the Director's certificate (e.g. `certs/rootCA.pem`)

If you are using the UAA for user management, additionally put certificates in these properties:

- `uaa.sslPrivateKey`
    - Private key for the UAA (e.g. `certs/uaa-web.key`)
- `uaa.sslCertificate`
    - Associated certificate for the UAA (e.g. `certs/uaa-web.crt`)
    - Include all intermediate certificates if necessary
- `login.saml.serviceProviderKey`
    - Private key for the UAA (e.g. `certs/uaa-sp.key`)
- `login.saml.serviceProviderCertificate`
    - Associated certificate for the UAA (e.g. `certs/uaa-sp.crt`)

---
## <a id="target"></a> Target the Director

After you deployed your Director with the above changes, you need to specify `--ca-cert` when targeting the Director:

<pre class="terminal">
$ bosh --ca-cert certs/rootCA.pem target 10.244.4.2
</pre>

<p class="note">Note: If your certificates are trusted via system installed CA certificates, there is no need to provide `--ca-cert` option.</p>

---
[Back to Table of Contents](index.html#install)
