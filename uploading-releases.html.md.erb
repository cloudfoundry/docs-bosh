---
title: Uploading Releases
---

(See [What is a Release?](release.html) for an introduction to releases.)

As described earlier, each deployment references one or many releases on the Director. Before the Director can form a deployment, all referenced releases must be uploaded to the Director.

## <a id='find'></a> Finding Releases

Releases are distributed in two ways: as a release tarball or through a source code repository. The [releases section of bosh.io](http://bosh.io/releases) provides a good list of available releases and their tarballs.

Here are a few popular releases:

- [cf-release](http://bosh.io/releases/github.com/cloudfoundry/cf-release) provides CloudFoundry
- [cf-mysql-release](http://bosh.io/releases/github.com/cloudfoundry/cf-mysql-release) provides highly-available MySQL
- [cf-rabbitmq-release](http://bosh.io/releases/github.com/pivotal-cf/cf-rabbitmq-release) provides RabbitMQ

---
## <a id='upload'></a> Uploading to the Director

Assuming that the CLI is already targeted at the Director, the CLI provides a single command to upload a release.

- If you have a URL to a release tarball (for example a URL provided by bosh.io):

	<pre class="terminal">
	$ bosh upload release https://bosh.io/d/github.com/cloudfoundry/cf-release
	</pre>

	Alternatively, if you have a release tarball on your local machine:

	<pre class="terminal">
	$ bosh upload release ~/Downloads/redis-12.tgz
	</pre>

- If you cloned a Git repository:

    Note that all release repositories have a `releases/` folder that contains release YAML files. These files have all the required information about how to assemble a specific version of a release (provided that the release maintainers produce and commit that version to the repository). You can use the YAML files to either directly upload a release, or to create a release tarball locally and then upload it.

    <pre class="terminal">
	$ cd ~/workspace/redis-boshrelease

	$ bosh upload release releases/redis/redis-12.yml
	</pre>

	Alternatively, to build a release tarball locally from a release YAML file:

	<pre class="terminal">
	$ cd ~/workspace/redis-boshrelease

	$ bosh create release releases/redis/redis-12.yml --with-tarball

	$ bosh upload release releases/redis/redis-12.tgz
	</pre>

Once the command succeeds, you can view all uploaded releases in the Director:

<pre class="terminal">
$ bosh releases

+--------+----------+-------------+
| Name   | Versions | Commit Hash |
+--------+----------+-------------+
| redis  | 12       | 3eb40ae4    |
| mesos  | 1        | d07b570b    |
+--------+----------+-------------+
(*) Currently deployed
(+) Uncommitted changes

Releases total: 5
</pre>

---
## <a id='using'></a> Deployment Manifest Usage

To use an uploaded release in your deployment, update the `releases` section in your deployment manifest:

```yaml
releases:
- {name: redis, version: 12}
```

---
Next: [Deploying](deploying.html)

Previous: [Uploading Stemcells](uploading-stemcells.html)
